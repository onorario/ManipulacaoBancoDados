---
title: "Desafio 10"
author: "Luiz Fernando de Oliveira Pereira RA: 267356"
format: 
  html:
    self-contained: true
editor: visual
---

## Quarto

```{python}
#!pip install polars 
#!pip install fastexcel
import polars as pl
```

```{python}
## Lembre-se que já carregamos a biblioteca
import polars as pl
```

A biblioteca abaixo apesar de não estar no slide, ela é necessária para wdi = pl.read_excel

```{python}
#!pip install pyarrow

import pyarrow 
```

```{python}
aeroportos = pl.read_csv("airports.csv",
                         columns = ["IATA_CODE", "CITY", "STATE"])
aeroportos.head(2)
```

```{python}
wdi = pl.read_excel("WDIEXCEL.xlsx", sheet_name = "Country",
                    columns = ["Short Name", "Region"])
wdi.head(2)
```

UM EXEMPLO SIMPLES

```{python}
df = pl.DataFrame({
    "grupo": ["A", "A", "B", "B", "C"],
    "valor1": [10, 15, 10, None, 25],
    "valor2": [5, None, 20, 30, None]
})
df
```

Operando valor1?

```{python}
df["valor1"]
```

```{python}
df["valor1"].mean()

```

```{python}
df["valor1"].drop_nulls()

```

```{python}
df["valor1"].drop_nulls().mean()

```

Operando colunas

```{python}
df.select([
  pl.col("valor1").mean().alias("media_v1"),
  pl.col("valor2").mean()
])
```

```{python}
df.group_by("grupo").agg([
  pl.col("valor1").mean().alias("media_valor1"),
  pl.col("valor2").min().alias("min_valor2")
]).sort("grupo")
```

De volta ao flights.csv

```{python}
voos = pl.read_csv("flights.csv",
                   columns = ["AIRLINE", "ARRIVAL_DELAY", "DESTINATION_AIRPORT"],
                   dtypes = {"AIRLINE": pl.Utf8,
                             "ARRIVAL_DELAY": pl.Int32,
                             "DESTINATION_AIRPORT": pl.Utf8})
voos.shape
```

fligthts.csv

```{python}
voos.head(3)
```

De volta ao flights.csv

Calcule o percentual de vôos das cias. aéreas “AA” e “DL” que atrasaram pelo menos 30 minutos nas chegadas aos aeroportos “SEA”, “MIA” e “BWI”.

```{python}
resultado = (
  voos.drop_nulls(["AIRLINE", "DESTINATION_AIRPORT", "ARRIVAL_DELAY"])
  .filter(
    pl.col("AIRLINE").is_in(["AA", "DL"]) &
    pl.col("DESTINATION_AIRPORT").is_in(["SEA", "MIA", "BWI"])
    )
    .group_by(["AIRLINE", "DESTINATION_AIRPORT"])
    .agg([
      (pl.col("ARRIVAL_DELAY") > 30).mean().alias("atraso_medio")
      ])
)
```

Resultado

```{python}
resultado.sort("atraso_medio")
```

## Dados Relacionais com Polares

Dados Clientes

```{python}
import polars as pl

# Criando DataFrames
clientes = pl.DataFrame({
    "cliente_id": [1, 2, 3, 4],
    "nome": ["Ana", "Bruno", "Clara", "Daniel"]
})

print(clientes)
```

Dados Compras

```{python}
pedidos = pl.DataFrame({
    "pedido_id": [101, 102, 103, 104, 105],
    "cliente_id": [1, 2, 3, 1, 5],
    "valor": [100.50, 250.75, 75.00, 130.00, 79.00]
})

print(pedidos)
```

Exemplo INNER JOIN

```{python}
res_ij = clientes.join(pedidos, on="cliente_id", how="inner")
print(res_ij)
```

Exemplo LEFT JOIN

```{python}
res_lj = clientes.join(pedidos, on="cliente_id", how="left")
print(res_lj)
```

Exemplo RIGHT JOIN

```{python}
res_rj = clientes.join(pedidos, on="cliente_id", how="right")
print(res_rj)
```

Exemplo OUTER JOIN

```{python}
res_oj = clientes.join(pedidos, on="cliente_id", how="outer")
print(res_oj)
```

Exemplo CROSS JOIN\
No exemplo abaixo realizei uma alteração para funcionar, pois:\
No **Polars**, o `how="cross"` (cross join) **não aceita chave (`on=...`)**.

```{python}
#Mudando
#res_cj = clientes.join(pedidos, on="cliente_id", how="cross")
res_cj = clientes.join(pedidos, how="cross")
print(res_cj)
```

# **P1: Qual é o valor médio das compras realizadas para cada cliente identificado?**

Como responder p1?\

```{python}
print(clientes)
```

```{python}
print(pedidos)
```

```{python}
res = res_ij.group_by(["nome", "cliente_id"]).agg(pl.col("valor").mean())
print(res)
```

# **P2: Informe os nomes e a quantidade de compras com valor mínimo de \$100.00 realizadas por cada cliente.**

Como responder p2?

```{python}
print(clientes)
```

```{python}
print(pedidos)
```

JOIN com múltiplas Colunas como Chaves

```{python}
vendas = pl.DataFrame({
    "id_venda": [1, 2, 3],
    "id_cl": [1, 2, 1],
    "id_prod": [101, 102, 103],
    "qtde": [2, 1, 1]
})

detalhes_pedidos = pl.DataFrame({
    "id_ped": [201, 202, 203],
    "cl_id": [1, 2, 1],
    "id_prod": [101, 102, 104],
    "valor": [50.00, 75.00, 100.00]
})
```

Detalhes das Tabelas

```{python}
print(vendas)
```

```{python}
print(detalhes_pedidos)

```

Realizando um JOIN com Múltiplas Colunas

```{python}
final = vendas.join(detalhes_pedidos,
                    left_on = ["id_cl", "id_prod"],
                    right_on = ["cl_id", "id_prod"],
                    how = "inner")
print(final)
```

```{r}
#Horário e dia em que o Html foi gerado
format(Sys.time(), "%d/%m/%Y %H:%M:%S")
```
