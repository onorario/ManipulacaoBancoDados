---
title: "Desafio 12"
author: "Luiz Fernando de Oliveira Pereira RA: 267356"
format: 
  html:
    self-contained: true
editor: visual
---

## Quarto

## SQLite e Polars

```{python}
import polars as pl
import sqlite3
```

**Iniciando a conexão com o banco**

```{python}
conn = sqlite3.connect('data.db')
cursor = conn.cursor()

```

**Criação manual de uma tabela**

```{python}
#Necessário o CÓDIGO ABAIXO, POIS o HTML não roda se a tabela já estiver criada
#Exclui a tabela 'vendas' se ela já existir
cursor.execute("DROP TABLE IF EXISTS vendas")

#Criando a tabela e definindo o tipo de cada variável
cursor.execute('''
CREATE TABLE vendas (
    id INTEGER PRIMARY KEY,
    vendedor TEXT,
    produto TEXT,
    valor REAL,
    data_venda DATE
)
''')
```

**Inserção de dados em uma tabela**

```{python}
cursor.execute('''
INSERT INTO vendas (vendedor, produto, valor, data_venda)
VALUES
    ('Ana', 'Produto A', 120.5, '2024-09-01'),
    ('Carlos', 'Produto B', 200.0, '2024-10-02'),
    ('Ana', 'Produto C', 150.0, '2024-09-03'),
    ('Bruno', 'Produto A', 300.0, '2024-11-04'),
    ('Carlos', 'Produto C', 100.0, '2024-10-05');
''')
conn.commit() #commit fazendo a confirmação da operação
```

**Consulta simples no SQLite**

```{python}
#Mostrando todos os dados da tabela criada
cursor.execute("SELECT * FROM vendas")
rows = cursor.fetchall()
for row in rows:
  print(row)
```

**Integração com Polars**

```{python}
import polars as pl
dados = pl.read_database("SELECT * FROM vendas", conn)
print(dados)
```

**Exemplos**

-   Qual é o total de vendas por vendedor?

```{python}
#Agrupando por vendedor, e somando o total de vendas da coluna vendas
vendas_total = pl.read_database('''
   SELECT vendedor, SUM(valor) as total_vendas
   FROM vendas
   GROUP BY vendedor;
''', conn)
print(vendas_total)
```

**Exemplos**

-   Qual é o valor médio de venda por vendedor?

```{python}
vendas_medias = pl.read_database('''
   SELECT vendedor, AVG(valor) as total_vendas
   FROM vendas
   GROUP BY vendedor;
''', conn)
print(vendas_medias)
```

**Exemplos**

-   Crie uma tabela contendo o nome do vendedor, o número de vendas realizadas, o total vendido e o valor médio por venda.

```{python}
vendas_comb = pl.read_database("""
SELECT vendedor, 
       COUNT(*) as numero_vendas,
       SUM(valor) as total_vendas, 
       AVG(valor) as media_vendas
FROM vendas
GROUP BY vendedor;
""", conn)
```

**Exemplo (continuação)**

```{python}
#Exibindo o vendas_comb
print(vendas_comb)
```

**Exemplo**

-   Quais foram as vendas de, pelo menos, \$200.00?

```{python}
ticket_alto = pl.read_database("""
SELECT * FROM vendas WHERE valor >= 200
""", conn)
print(ticket_alto)
```

**Operações com Datas em SQLite**

-   Qual foi o volume mensal de vendas?

```{python}
#Utilizando a função strftime para formatar datas
vendas_mensais = pl.read_database("""
SELECT strftime('%Y-%m', data_venda) AS mes, SUM(valor) AS total_vendas
FROM vendas GROUP BY mes ORDER BY mes
""", conn)
print(vendas_mensais)
```

**Criando a tabela de produtos**

```{python}
#Necessário o CÓDIGO ABAIXO, POIS o HTML não roda se a tabela já estiver criada
#Excluindo a tabela 'produtos' se ela já existir
cursor.execute("DROP TABLE IF EXISTS produtos")

cursor.execute('''
CREATE TABLE IF NOT EXISTS produtos (
    id INTEGER PRIMARY KEY,
    nome TEXT NOT NULL,
    categoria TEXT NOT NULL,
    preco REAL NOT NULL,
    estoque INTEGER NOT NULL
);
''')
cursor.execute('''
INSERT INTO produtos (nome, categoria, preco, estoque) VALUES
    ('Produto A', 'Categoria 1', 100.0, 50),
    ('Produto B', 'Categoria 2', 150.0, 30),
    ('Produto C', 'Categoria 1', 200.0, 20),
    ('Produto D', 'Categoria 2', 250.0, 10),
    ('Produto E', 'Categoria 3', 300.0, 0);
''')
conn.commit()
```

**Consultando a tabela de produtos**

```{python}
prods = pl.read_database("SELECT * FROM produtos", conn)
print(prods)
```

**JOINs de `vendas` e `produtos`**

```{python}
# O INNER JOIN Retorna apenas as linhas que têm correspondências (de chaves) nas duas tabelas.
lucros = pl.read_database("""
SELECT produto, valor AS compra, preco AS venda, preco-valor AS lucro
FROM vendas
INNER JOIN produtos ON vendas.produto = produtos.nome
""", conn)
print(lucros)
```

**Exemplo:**

-   Qual foi o lucro médio por vendedor?

```{python}
lucro_medio = pl.read_database("""
SELECT vendedor, produto, AVG(preco-valor) AS lucro_medio
FROM vendas
INNER JOIN produtos ON vendas.produto = produtos.nome
GROUP BY vendedor
""", conn)
print(lucro_medio)
```

```{r}
#Horário e dia em que o Html foi gerado
format(Sys.time(), "%d/%m/%Y %H:%M:%S")
```
